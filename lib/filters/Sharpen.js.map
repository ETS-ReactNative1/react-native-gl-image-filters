<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"sources":["../../src/filters/Sharpen.js"],"names":["Sharpen","shaders","Shaders","create","sharpen","frag","GLSL","factor","width","height","t","children","resolution"],"mappings":"opDA+BwBA,O,8RA5BxB,GAAMC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BC,QAAS,CACPC,QAAMC,aAAN,kBADO,CADoB,CAAf,CAAhB,CA4Be,QAASN,QAAT,GAA6D,SAA1CO,MAA0C,CAA1CA,CAA0C,YAAjC,CAAiC,GAA9BC,CAA8B,GAA9BA,KAA8B,CAAvBC,CAAuB,GAAvBA,MAAuB,CAALC,CAAK,GAAfC,QAAe,CAC1E,MACE,+BAAC,aAAD,EACE,OAAQV,QAAQG,OADlB,CAEE,SAAU,CACRG,QADQ,CAERK,WAAY,CAACJ,CAAD,CAAQC,CAAR,CAFJ,CAGRC,GAHQ,CAFZ,EASH","file":"Sharpen.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nconst shaders = Shaders.create({\n  sharpen: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform float factor;\n      uniform vec2 resolution; \n\n      void main() {\n        float test = factor;\n        vec2 step = 1.0 / resolution;\n\n        vec3 texA = texture2D( t, uv + vec2(-step.x, -step.y) * 1.5 ).rgb;\n        vec3 texB = texture2D( t, uv + vec2( step.x, -step.y) * 1.5 ).rgb;\n        vec3 texC = texture2D( t, uv + vec2(-step.x,  step.y) * 1.5 ).rgb;\n        vec3 texD = texture2D( t, uv + vec2( step.x,  step.y) * 1.5 ).rgb;\n        \n        vec3 around = 0.25 * (texA + texB + texC + texD);\n        vec3 center  = texture2D( t, uv ).rgb;\n        vec3 col = center + (center - around) * factor;\n\n        gl_FragColor = vec4(col, 1.0);\n      }\n    `\n  }\n});\n\nexport default function Sharpen({ factor = 0, width, height, children: t }) {\n  return (\n    <Node\n      shader={shaders.sharpen}\n      uniforms={{\n        factor,\n        resolution: [width, height],\n        t,\n      }}\n    />\n  )\n}\n"]}
=======
{"version":3,"sources":["../../src/filters/Sharpen.js"],"names":["Temperature","shaders","Shaders","create","sharpen","frag","GLSL","factor","width","height","t","children","resolution"],"mappings":";;;;;;;;kBA+BwBA,W;;AA/BxB;;AACA;;;;;;;;AAEA,IAAMC,UAAUC,iBAAQC,MAAR,CAAe;AAC7BC,WAAS;AACPC,cAAMC,aAAN;AADO;AADoB,CAAf,CAAhB;;AA4Be,SAASN,WAAT,OAAiE;AAAA,yBAA1CO,MAA0C;AAAA,MAA1CA,MAA0C,+BAAjC,CAAiC;AAAA,MAA9BC,KAA8B,QAA9BA,KAA8B;AAAA,MAAvBC,MAAuB,QAAvBA,MAAuB;AAAA,MAALC,CAAK,QAAfC,QAAe;;AAC9E,SACE,8BAAC,aAAD;AACE,YAAQV,QAAQG,OADlB;AAEE,cAAU;AACRG,oBADQ;AAERK,kBAAY,CAACJ,KAAD,EAAQC,MAAR,CAFJ;AAGRC;AAHQ;AAFZ,IADF;AAUD","file":"Sharpen.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nconst shaders = Shaders.create({\n  sharpen: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform float factor;\n      uniform vec2 resolution; \n\n      void main() {\n        float test = factor;\n        vec2 step = 1.0 / resolution;\n\n        vec3 texA = texture2D( t, uv + vec2(-step.x, -step.y) * 1.5 ).rgb;\n        vec3 texB = texture2D( t, uv + vec2( step.x, -step.y) * 1.5 ).rgb;\n        vec3 texC = texture2D( t, uv + vec2(-step.x,  step.y) * 1.5 ).rgb;\n        vec3 texD = texture2D( t, uv + vec2( step.x,  step.y) * 1.5 ).rgb;\n        \n        vec3 around = 0.25 * (texA + texB + texC + texD);\n        vec3 center = texture2D( t, uv ).rgb;\n        vec3 col = center + (center - around) * factor;\n\n        gl_FragColor = vec4(col, 1.0);\n      }\n    `\n  }\n});\n\nexport default function Temperature({ factor = 0, width, height, children: t }) {\n  return (\n    <Node\n      shader={shaders.sharpen}\n      uniforms={{\n        factor,\n        resolution: [width, height],\n        t,\n      }}\n    />\n  )\n}\n"]}
>>>>>>> 4269836... add exposure filter ðŸŽ‰
=======
{"version":3,"sources":["../../src/filters/Sharpen.js"],"names":["Sharpen","shaders","Shaders","create","sharpen","frag","GLSL","DefaultValue","factor","width","height","t","children","resolution"],"mappings":"8qDAiCwBA,O,iSA9BlBC,SAAUC,iBAAQC,MAAR,CAAe,CAC7BC,QAAS,CACPC,QAAMC,aAAN,kBADO,CADoB,CAAf,C,CA4BHC,kCAAe,C,CAEb,QAASP,QAAT,GAAwE,SAArDQ,MAAqD,CAArDA,CAAqD,YAA5CD,YAA4C,GAA9BE,CAA8B,GAA9BA,KAA8B,CAAvBC,CAAuB,GAAvBA,MAAuB,CAALC,CAAK,GAAfC,QAAe,CACrF,MACE,+BAAC,aAAD,EACE,OAAQX,QAAQG,OADlB,CAEE,SAAU,CACRI,QADQ,CAERK,WAAY,CAACJ,CAAD,CAAQC,CAAR,CAFJ,CAGRC,GAHQ,CAFZ,EASH","file":"Sharpen.js","sourcesContent":["import { Shaders, Node, GLSL } from \"gl-react\";\nimport React from \"react\";\n\nconst shaders = Shaders.create({\n  sharpen: {\n    frag: GLSL`\n      precision highp float;\n      varying vec2 uv;\n      uniform sampler2D t;\n      uniform float factor;\n      uniform vec2 resolution; \n\n      void main() {\n        float test = factor;\n        vec2 step = 1.0 / resolution;\n\n        vec3 texA = texture2D( t, uv + vec2(-step.x, -step.y) * 1.5 ).rgb;\n        vec3 texB = texture2D( t, uv + vec2( step.x, -step.y) * 1.5 ).rgb;\n        vec3 texC = texture2D( t, uv + vec2(-step.x,  step.y) * 1.5 ).rgb;\n        vec3 texD = texture2D( t, uv + vec2( step.x,  step.y) * 1.5 ).rgb;\n        \n        vec3 around = 0.25 * (texA + texB + texC + texD);\n        vec3 center = texture2D( t, uv ).rgb;\n        vec3 col = center + (center - around) * factor;\n\n        gl_FragColor = vec4(col, 1.0);\n      }\n    `\n  }\n});\n\nexport const DefaultValue = 0;\n\nexport default function Sharpen({ factor = DefaultValue, width, height, children: t }) {\n  return (\n    <Node\n      shader={shaders.sharpen}\n      uniforms={{\n        factor,\n        resolution: [width, height],\n        t,\n      }}\n    />\n  )\n}\n"]}
>>>>>>> 0b5e210... add Constants.DefaultValues to API
